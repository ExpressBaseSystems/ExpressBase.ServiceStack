using ExpressBase.Common;
using ExpressBase.Common.Constants;
using ExpressBase.Common.Data;
using ExpressBase.Common.Objects;
using ExpressBase.Common.Structures;
using ExpressBase.Objects;
using ExpressBase.Objects.ServiceStack_Artifacts;
using ServiceStack.Messaging;
using System;
using System.Collections.Generic;
using System.Linq;
using ExpressBase.Security;
using ExpressBase.Common.Extensions;
using System.Data.Common;
using ExpressBase.Common.Application;
using Newtonsoft.Json;
using ServiceStack;
using ExpressBase.Objects.Helpers;
using ExpressBase.Common.LocationNSolution;
using ExpressBase.Common.ServiceClients;
using ExpressBase.Common.EbServiceStack.ReqNRes;
using ExpressBase.Objects.WebFormRelated;

namespace ExpressBase.ServiceStack.Services
{
    [Authenticate]
    public class MobileServices : EbBaseService
    {
        const string EBPARAM_LOCID = "eb_loc_id";

        public MobileServices(IEbConnectionFactory _dbf, IEbStaticFileClient _sfc, IMessageProducer _mqp) : base(_dbf, _sfc, _mqp) { }

        Dictionary<int, byte[]> Images = new Dictionary<int, byte[]>();
        public CreateMobileFormTableResponse Post(CreateMobileFormTableRequest request)
        {
            CreateMobileFormTableResponse response = new CreateMobileFormTableResponse();
            string msg = string.Empty;
            try
            {
                EbMobileForm mobileForm = (EbMobileForm)request.MobilePage.Container;
                IVendorDbTypes vDbTypes = this.EbConnectionFactory.DataDB.VendorDbTypes;
                var tableMetaDict = mobileForm.GetTableMetaCollection(vDbTypes);

                WebFormServices webservices = base.ResolveService<WebFormServices>();
                webservices.EbConnectionFactory = this.EbConnectionFactory;

                int status = 0;
                foreach (var pair in tableMetaDict)
                {
                    int s = webservices.CreateOrAlterTable(pair.Key, pair.Value, ref msg);
                    if (pair.Key.Equals(mobileForm.TableName))
                    {
                        status = s;
                    }
                }

                bool saveRequired = false;

                int flag = this.CreateOrUpdateWebForm(request, status == 0);

                if (mobileForm.AutoDeployMV && string.IsNullOrEmpty(mobileForm.AutoGenMVRefid))
                {
                    this.GenerateVisualization(tableMetaDict[mobileForm.TableName], request);
                    saveRequired = true;
                }

                if (saveRequired || flag == 1)
                {
                    this.SaveEbObject(request.MobilePage, request);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("EXCEPTION AT MOBILE TABLE CREATION : " + e.Message);
                Console.WriteLine(e.StackTrace);
            }
            return response;
        }

        private int CreateOrUpdateWebForm(CreateMobileFormTableRequest request, bool generateWebForm)
        {
            EbMobilePage page = request.MobilePage;
            EbMobileForm mobileForm = (EbMobileForm)page.Container;

            if (generateWebForm)
            {
                EbWebForm webForm = mobileForm.GenerateWebForm(page.DisplayName);
                string refid = this.CreateNewEbObject(webForm, request);
                if (refid != null)
                {
                    mobileForm.WebFormRefId = refid;
                    mobileForm.IsWebFormAutoGenerated = true;
                }
                return 1;
            }
            else if (mobileForm.IsWebFormAutoGenerated)
            {
                if (!string.IsNullOrEmpty(mobileForm.WebFormRefId))
                {
                    EbWebForm webForm = this.GetEbObject<EbWebForm>(mobileForm.WebFormRefId);
                    if (webForm == null)
                        return -1;
                    mobileForm.UpdateWebForm(webForm);
                    this.SaveEbObject(webForm, request);
                }
                return 0;
            }
            return -1;
        }

        private void GenerateVisualization(List<TableColumnMeta> tableMeta, CreateMobileFormTableRequest request)
        {
            EbMobileForm mobileForm = (EbMobileForm)request.MobilePage.Container;

            string dataSourceRefid = this.GenerateDataReader(tableMeta, request);

            if (!string.IsNullOrEmpty(dataSourceRefid))
            {
                EbMobilePage page = new EbMobilePage
                {
                    Name = $"{request.MobilePage.Name}_list",
                    DisplayName = $"{request.MobilePage.DisplayName} List (Auto)"
                };

                EbMobileVisualization visualization = new EbMobileVisualization
                {
                    Name = Guid.NewGuid().ToString("N"),
                    DataSourceRefId = dataSourceRefid,
                    Type = MobileVisualizationType.Dynamic,
                    SourceFormRefId = request.MobilePage.RefId,
                    OfflineQuery = new EbScript
                    {
                        Lang = ScriptingLanguage.CSharp,
                        Code = $"SELECT * FROM {mobileForm.TableName};"
                    }
                };
                page.Container = visualization;
                visualization.DataLayout = new EbMobileTableLayout { RowCount = 2, ColumCount = 2 };

                for (int rowIndex = 0; rowIndex < 2; rowIndex++)
                {
                    for (int columnIndex = 0; columnIndex < 2; columnIndex++)
                    {
                        visualization.DataLayout.CellCollection.Add(new EbMobileTableCell
                        {
                            RowIndex = rowIndex,
                            ColIndex = columnIndex
                        });
                    }
                }

                visualization.DataLayout.CellCollection[0].Width = 60;
                visualization.DataLayout.CellCollection[0].ControlCollection.Add(new EbMobileDataColumn
                {
                    ColumnIndex = 0,
                    ColumnName = tableMeta[0].Name,
                    Type = tableMeta[0].Type.EbDbType
                });
                mobileForm.AutoGenMVRefid = this.CreateNewEbObject(page, request);
            }
        }

        private string GenerateDataReader(List<TableColumnMeta> tableMeta, CreateMobileFormTableRequest request)
        {
            string tableName = (request.MobilePage.Container as EbMobileForm).TableName;

            string[] unWanted = new string[] { "eb_del", "eb_ver_id" };
            IEnumerable<TableColumnMeta> queryColumns = tableMeta.Where(meta => !unWanted.Contains(meta.Name));
            string cols = string.Join(CharConstants.COMMA + "\n \t ", queryColumns.Select(x => x.Name).ToArray());

            EbDataReader dataReader = new EbDataReader
            {
                Sql = $"SELECT \n \t id,{cols} FROM {tableName} \n WHERE eb_del='F'",
                FilterDialogRefId = "",
                Name = request.MobilePage.Name + "_autogenerated",
                DisplayName = request.MobilePage.DisplayName + " (Auto)",
                Description = request.MobilePage.Description
            };

            return this.CreateNewEbObject(dataReader, request);
        }

        private string CreateNewEbObject(EbObject ebObject, CreateMobileFormTableRequest request)
        {
            string refid = null;
            string relatedRefids = string.Join(",", ebObject.DiscoverRelatedRefids());

            EbObject_Create_New_ObjectRequest serviceDTO = new EbObject_Create_New_ObjectRequest
            {
                Name = ebObject.Name,
                Description = ebObject.Description,
                Json = EbSerializers.Json_Serialize(ebObject),
                Status = ObjectLifeCycleStatus.Live,
                IsSave = false,
                Tags = "",
                Apps = request.Apps,
                SolnId = request.SolnId,
                WhichConsole = request.WhichConsole,
                UserId = request.UserId,
                UserAuthId = request.UserAuthId,
                SourceObjId = "0",
                SourceVerID = "0",
                DisplayName = ebObject.DisplayName,
                SourceSolutionId = request.SolnId,
                Relations = relatedRefids
            };

            try
            {
                EbObjectService objectService = base.ResolveService<EbObjectService>();
                var response = objectService.Post(serviceDTO);
                refid = response.RefId;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
            return refid;
        }

        private void SaveEbObject(EbObject ebObject, CreateMobileFormTableRequest request)
        {
            string relatedRefid = string.Join(",", ebObject.DiscoverRelatedRefids());

            EbObject_SaveRequest serviceDTO = new EbObject_SaveRequest
            {
                RefId = ebObject.RefId,
                Name = ebObject.Name,
                Description = ebObject.Description,
                Json = EbSerializers.Json_Serialize(ebObject),
                Relations = relatedRefid,
                Tags = "",
                Apps = request.Apps,
                DisplayName = ebObject.DisplayName,
                SolnId = request.SolnId,
                WhichConsole = request.WhichConsole,
                UserAuthId = request.UserAuthId,
                UserId = request.UserId
            };

            try
            {
                EbObjectService objectService = base.ResolveService<EbObjectService>();
                var response = objectService.Post(serviceDTO);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }

        private T GetEbObject<T>(string ebRefId)
        {
            T ebObject = this.Redis.Get<T>(ebRefId);

            if (ebObject == null)
            {
                EbObjectParticularVersionResponse obj = this.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest
                {
                    RefId = ebRefId
                });
                ebObject = EbSerializers.Json_Deserialize<T>(obj.Data[0].Json);
            }
            return ebObject;
        }

        public EbMobileSolutionData Post(MobileSolutionDataRequestV2 request)
        {
            EbMobileSolutionData data = new EbMobileSolutionData();

            string idcheck = "AND EO.id = ANY(string_to_array(@ids, ',')::int[])";
            string query = @"
SELECT 
	EO.id, EO.obj_name, EO.display_name, EO.obj_type, EOV.version_num, EOV.refid,
    (CASE WHEN EOV.commit_ts <= :last_sync_ts THEN NULL ELSE EOV.obj_json END) AS obj_json,
	EA.id AS app_id, EA.applicationname, EA.app_icon, EA.application_type, EA.app_settings
FROM
	eb_objects EO
JOIN eb_objects2application EOA 	ON EOA.obj_id=EO.id
JOIN eb_applications EA				ON EA.id=EOA.app_id
JOIN eb_objects_ver EOV 			ON EOV.eb_objects_id = EO.id
LEFT JOIN 
	(SELECT MAX(id) AS id, eb_obj_ver_id FROM eb_objects_status WHERE status = 3 GROUP BY eb_obj_ver_id) EOS 
ON EOS.eb_obj_ver_id = EOV.id
WHERE
	COALESCE(EO.eb_del, 'F') = 'F' AND COALESCE(EOS.id, 0) > 0 AND 
	(EO.obj_type = 13 OR EO.obj_type = 3) AND 
	COALESCE(EOA.eb_del, 'F') = 'F' AND
	EA.eb_del = 'F' AND EA.application_type = 2 
	{0}
ORDER BY 
	display_name;

SELECT CURRENT_TIMESTAMP AT TIME ZONE 'UTC'; 

SELECT DISTINCT id FROM eb_form_drafts WHERE draft_type = @draft_type AND eb_created_by = @eb_created_by AND 
    COALESCE(is_submitted, 'F') = 'F' AND COALESCE(eb_del, 'F') = 'F' AND id =  ANY(STRING_TO_ARRAY(@err_ids, ',')::INT[]); ";

            data.CurrentUser = this.GetUserObject(request.UserAuthId);
            data.CurrentSolution = this.GetSolutionObject(request.SolnId);

            try
            {
                if (data.CurrentSolution != null) data.Locations = data.CurrentSolution.GetLocationsByUser(data.CurrentUser);

                Dictionary<string, object> metaData = JsonConvert.DeserializeObject<Dictionary<string, object>>(request.MetaData);
                DateTime date = metaData.ContainsKey("last_sync_ts") ? Convert.ToDateTime(metaData["last_sync_ts"]) : DateTime.MinValue;
                List<int> draft_ids = metaData.ContainsKey("draft_ids") ? (List<int>)metaData["draft_ids"] : new List<int>();
                EbDataSet ds;
                List<DbParameter> param = new List<DbParameter>()
                {
                    this.EbConnectionFactory.DataDB.GetNewParameter("last_sync_ts", EbDbTypes.DateTime, date),
                    this.EbConnectionFactory.DataDB.GetNewParameter("draft_type", EbDbTypes.Int32, (int)FormDraftTypes.ErrorBin),
                    this.EbConnectionFactory.DataDB.GetNewParameter("draft_type", EbDbTypes.Int32, request.UserId),
                    this.EbConnectionFactory.DataDB.GetNewParameter("err_ids", EbDbTypes.String, String.Join(",", draft_ids))
                };

                if (data.CurrentUser.IsAdmin())
                {
                    query = string.Format(query, string.Empty);
                }
                else
                {
                    string[] Ids = data.CurrentUser.GetAccessIds();
                    query = string.Format(query, idcheck);
                    param.Add(this.EbConnectionFactory.DataDB.GetNewParameter("ids", EbDbTypes.String, String.Join(",", Ids)));
                }

                ds = this.EbConnectionFactory.ObjectsDB.DoQueries(query, param.ToArray());

                data.last_sync_ts = Convert.ToDateTime(ds.Tables[1].Rows[0][0]);

                foreach (EbDataRow dr in ds.Tables[2].Rows)
                    data.DraftIds.Add(Convert.ToInt32(dr[0]));

                foreach (EbDataRow row in ds.Tables[0].Rows)
                {
                    int appId = Convert.ToInt32(row["app_id"]);
                    AppDataToMob appData = data.Applications.Find(e => e.AppId == appId);

                    if (appData == null)
                    {
                        appData = new AppDataToMob
                        {
                            AppId = appId,
                            AppName = row["applicationname"]?.ToString(),
                            AppIcon = row["app_icon"]?.ToString(),
                            AppSettings = JsonConvert.DeserializeObject<EbMobileSettings>(row["app_settings"]?.ToString())
                        };

                        data.Applications.Add(appData);

                        if (appData.AppSettings != null)
                        {
                            EbDataSet dataset = PullAppConfiguredData(appData.AppSettings, data.CurrentUser.UserId);
                            appData.OfflineData.Tables.AddRange(dataset.Tables);
                        }
                    }

                    EbObjectType objType = (EbObjectType)Convert.ToInt32(row["obj_type"]);
                    if (objType.IntCode == EbObjectTypes.MobilePage)
                    {
                        appData.MobilePages.Add(new MobilePagesWraper
                        {
                            Name = row["obj_name"]?.ToString(),
                            DisplayName = row["display_name"]?.ToString(),
                            Version = row["version_num"]?.ToString(),
                            Json = row["obj_json"]?.ToString(),
                            RefId = row["refid"]?.ToString()
                        });
                    }
                    else
                    {
                        string json = row["obj_json"]?.ToString();
                        appData.WebObjects.Add(new WebObjectsWraper
                        {
                            Name = row["obj_name"]?.ToString(),
                            DisplayName = row["display_name"]?.ToString(),
                            Version = row["version_num"]?.ToString(),
                            Json = json,
                            RefId = row["refid"]?.ToString(),
                            ObjectType = objType.IntCode
                        });

                        if (!string.IsNullOrEmpty(json) && objType.IntCode == EbObjectTypes.iReport)
                        {
                            EbReport Report = EbSerializers.Json_Deserialize(json);

                            foreach (EbReportHeader r_header in Report.ReportHeaders)
                                FetchImages(r_header.GetFields());

                            foreach (EbReportFooter r_footer in Report.ReportFooters)
                                FetchImages(r_footer.GetFields());

                            foreach (EbPageHeader p_header in Report.PageHeaders)
                                FetchImages(p_header.GetFields());

                            foreach (EbReportDetail detail in Report.Detail)
                                FetchImages(detail.GetFields());

                            foreach (EbPageFooter p_footer in Report.PageFooters)
                                FetchImages(p_footer.GetFields());

                            foreach (EbReportGroup group in Report.ReportGroups)
                            {
                                FetchImages(group.GroupHeader.GetFields());
                                FetchImages(group.GroupFooter.GetFields());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("exception at get all application [MobileSolutionDataRequestV2] ::" + ex.Message);
            }
            data.Images = this.Images;
            return data;
        }

        public void FetchImages(List<EbReportField> fields)
        {
            foreach (EbReportField f in fields)
            {
                if (f is EbImg)
                {
                    byte[] b = GetImage((f as EbImg).ImageRefId);
                    if (!b.IsEmpty())
                    {
                        this.Images.Add((f as EbImg).ImageRefId, b);
                    }
                }
            }
        }
        public byte[] GetImage(int refId)
        {
            DownloadFileResponse dfs = null;

            byte[] fileByte = new byte[0];
            dfs = FileClient.Get
                 (new DownloadImageByIdRequest
                 {
                     ImageInfo = new ImageMeta
                     {
                         FileRefId = refId,
                         FileCategory = Common.Enums.EbFileCategory.Images
                     }
                 });
            if (dfs.StreamWrapper != null)
            {
                dfs.StreamWrapper.Memorystream.Position = 0;
                fileByte = dfs.StreamWrapper.Memorystream.ToBytes();
            }

            return fileByte;
        }

        public EbMobileSolutionData Get(MobileSolutionDataRequest request)
        {
            EbMobileSolutionData data = new EbMobileSolutionData();

            string idcheck = EbConnectionFactory.DataDB.EB_GET_MOB_MENU_OBJ_IDS;
            const string acquery = @"SELECT EA.id, EA.applicationname,EA.app_icon,EA.application_type,EA.app_settings
                                    FROM 
	                                    eb_applications EA
                                    WHERE
	                                    EXISTS (SELECT * FROM eb_objects2application EOA WHERE EOA.app_id = EA.id AND EOA.eb_del = 'F' {0})
                                    AND EA.eb_del = 'F' AND EA.application_type = 2;";

            data.CurrentUser = this.GetUserObject(request.UserAuthId);
            bool isAdmin = data.CurrentUser.IsAdmin();
            data.CurrentSolution = this.GetSolutionObject(request.SolnId);
            string sql;
            EbDataTable dt;

            try
            {
                if (data.CurrentSolution != null) data.Locations = data.CurrentSolution.GetLocationsByUser(data.CurrentUser);

                if (isAdmin)
                {
                    sql = string.Format(acquery, string.Empty);
                    dt = this.EbConnectionFactory.ObjectsDB.DoQuery(sql);
                }
                else
                {
                    string[] Ids = data.CurrentUser.GetAccessIds();
                    sql = string.Format(acquery, idcheck);
                    DbParameter[] parameters = { this.EbConnectionFactory.DataDB.GetNewParameter("ids", EbDbTypes.String, String.Join(",", Ids)) };
                    dt = this.EbConnectionFactory.ObjectsDB.DoQuery(sql, parameters);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("exception at get all application [MobileSolutionDataRequest] ::" + ex.Message);
                dt = new EbDataTable();
            }

            foreach (EbDataRow row in dt.Rows)
            {
                data.Applications.Add(new AppDataToMob
                {
                    AppId = Convert.ToInt32(row["id"]),
                    AppName = row["applicationname"].ToString(),
                    AppIcon = row["app_icon"].ToString(),
                    AppSettings = JsonConvert.DeserializeObject<EbMobileSettings>(row["app_settings"].ToString())
                });
            }

            this.GetMobilePagesByAppliation(data, isAdmin, request.Export);
            this.SetProfilePages(data);

            return data;
        }

        private void GetMobilePagesByAppliation(EbMobileSolutionData data, bool isAdmin, bool export)
        {
            string idcheck = EbConnectionFactory.ObjectsDB.EB_GET_MOBILE_PAGES;
            string Sql = EbConnectionFactory.ObjectsDB.EB_GET_MOBILE_PAGES_OBJS;

            foreach (AppDataToMob app in data.Applications)
            {
                if (app.AppSettings != null && export)
                {
                    EbDataSet ds = PullAppConfiguredData(app.AppSettings, data.CurrentUser.UserId);
                    app.OfflineData.Tables.AddRange(ds.Tables);
                }

                List<DbParameter> parameters = new List<DbParameter> {
                    this.EbConnectionFactory.ObjectsDB.GetNewParameter("appid", EbDbTypes.Int32, app.AppId)
                };

                string query;

                if (isAdmin)
                    query = string.Format(Sql, string.Empty);
                else
                {
                    string[] objids = data.CurrentUser.GetAccessIds();
                    parameters.Add(this.EbConnectionFactory.ObjectsDB.GetNewParameter("objids", EbDbTypes.String, objids.Join(",")));
                    query = string.Format(Sql, idcheck);
                }

                try
                {
                    EbDataSet ds = this.EbConnectionFactory.DataDB.DoQueries(query, parameters.ToArray());

                    foreach (EbDataRow dr in ds.Tables[0].Rows)
                    {
                        EbObjectType objType = (EbObjectType)Convert.ToInt32(dr["obj_type"]);
                        if (objType.IntCode == EbObjectTypes.MobilePage)
                        {
                            app.MobilePages.Add(new MobilePagesWraper
                            {
                                Name = dr["obj_name"].ToString(),
                                DisplayName = dr["display_name"].ToString(),
                                Version = dr["version_num"].ToString(),
                                Json = dr["obj_json"].ToString(),
                                RefId = dr["refid"].ToString()
                            });
                        }
                        else
                        {
                            app.WebObjects.Add(new WebObjectsWraper
                            {
                                Name = dr["obj_name"].ToString(),
                                DisplayName = dr["display_name"].ToString(),
                                Version = dr["version_num"].ToString(),
                                Json = dr["obj_json"].ToString(),
                                RefId = dr["refid"].ToString(),
                                ObjectType = objType.IntCode
                            });
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        private EbDataSet PullAppConfiguredData(EbMobileSettings Settings, int userid)
        {
            EbDataSet DataSet = new EbDataSet();

            try
            {
                foreach (DataImportMobile DI in Settings.DataImport)
                {
                    int objtype = Convert.ToInt32(DI.RefId.Split(CharConstants.DASH)[2]);

                    if (objtype == (int)EbObjectTypes.DataReader)
                    {
                        DataSourceDataSetResponse resp = this.Gateway.Send<DataSourceDataSetResponse>(new DataSourceDataSetRequest
                        {
                            RefId = DI.RefId,
                            Params = new List<Param>
                            {
                                new Param
                                {
                                    Name = "eb_currentuser_id",
                                    Type = ((int)EbDbTypes.Int32).ToString(),
                                    Value = userid.ToString()
                                }
                            }
                        });

                        if (resp.DataSet.Tables.Any())
                        {
                            resp.DataSet.Tables[0].TableName = DI.TableName;
                            DataSet.Tables.Add(resp.DataSet.Tables[0]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception at pull app configured data ::" + ex.Message);
            }
            return DataSet;
        }

        private void SetProfilePages(EbMobileSolutionData data)
        {
            if (data.CurrentSolution.GetMobileSettings(out var appSettings) && appSettings.UserTypeForms != null)
            {
                List<MobilePagesWraper> profilePages = new List<MobilePagesWraper>();

                foreach (EbProfileUserType userType in appSettings.UserTypeForms)
                {
                    if (string.IsNullOrEmpty(userType.RefId))
                        continue;
                    try
                    {
                        EbMobilePage page = this.GetEbObject<EbMobilePage>(userType.RefId);

                        profilePages.Add(new MobilePagesWraper
                        {
                            Name = page.Name,
                            DisplayName = page.DisplayName,
                            Json = EbSerializers.Json_Serialize(page),
                            RefId = userType.RefId,
                            Version = page.VersionNumber
                        });
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
                data.ProfilePages = profilePages;
            }
        }

        public EbMobileAutoIdDataResponse Post(EbMobileAutoIdDataRequest request)
        {
            List<EbMobileAutoIdData> autoIdData = JsonConvert.DeserializeObject<List<EbMobileAutoIdData>>(request.AutoIdData);
            string query = string.Empty;
            foreach (EbMobileAutoIdData data in autoIdData)
            {
                query += $"SELECT MAX({data.Column}) FROM {data.Table} WHERE {data.Column} LIKE '{data.Prefix}%'; ";
            }
            EbDataSet ds = this.EbConnectionFactory.DataDB.DoQueries(query);
            EbDataTable dt = new EbDataTable("eb_latest_autoid");
            dt.Columns.Add(dt.NewDataColumn(0, "key", EbDbTypes.String));
            dt.Columns.Add(dt.NewDataColumn(1, "val", EbDbTypes.String));
            for (int i = 0; i < autoIdData.Count; i++)
            {
                EbMobileAutoIdData data = autoIdData[i];
                if (ds.Tables[i].Rows.Count > 0)
                {
                    EbDataRow row = dt.NewDataRow();
                    row.Add($"{data.Table}_{data.Column}");
                    row.Add(ds.Tables[i].Rows[0][0]?.ToString());
                    dt.Rows.Add(row);
                }
            }

            return new EbMobileAutoIdDataResponse() { OfflineData = dt };
        }

        public MobileDataResponse Get(MobileVisDataRequest request)
        {
            MobileDataResponse resp = new MobileDataResponse();
            try
            {
                EbDataReader dataReader = this.GetEbObject<EbDataReader>(request.DataSourceRefId);

                List<DbParameter> parameters = request.Params.ParamsToDbParameters(this.EbConnectionFactory);

                parameters.Add(this.EbConnectionFactory.DataDB.GetNewParameter("eb_currentuser_id", EbDbTypes.Int32, request.UserId));

                if (request.Limit != 0)
                {
                    parameters.Add(this.EbConnectionFactory.ObjectsDB.GetNewParameter("limit", EbDbTypes.Int32, request.Limit));
                    parameters.Add(this.EbConnectionFactory.ObjectsDB.GetNewParameter("offset", EbDbTypes.Int32, request.Offset));
                }

                string wraped = this.WrapQuery(dataReader.Sql, request, parameters);

                resp.Data = this.EbConnectionFactory.DataDB.DoQueries(wraped, parameters.ToArray());
                resp.Message = "Success";
            }
            catch (Exception ex)
            {
                resp.Message = "GetData Exception: " + ex.Message;
                Console.WriteLine("Exception at object list for user mobile req ::" + ex.Message);
            }
            return resp;
        }

        private string WrapQuery(string sql, MobileVisDataRequest request, List<DbParameter> parameters)
        {
            string wraped = string.Empty;
            try
            {
                sql = sql.Trim().TrimEnd(CharConstants.SEMI_COLON);

                if (request.IsPowerSelect && request.Params.Any())
                {
                    Param p = request.Params[0];
                    wraped += $"SELECT * FROM ({sql}) AS PWWRP WHERE LOWER(PWWRP.{p.Name}) LIKE '%{p.Value.ToLower()}%'";
                }
                else if (request.NoWrap)
                {
                    wraped = sql;
                }
                else
                {
                    wraped += $"SELECT * FROM ({sql}) AS PWWRP ";

                    bool hasWhere = false;

                    if (request.Params.Any())
                    {
                        string query = this.GetFilterQuery(sql, request.Params);
                        hasWhere = query.Contains("WHERE");
                        wraped += query;
                    }

                    if (request.SearchColumns.Any())
                    {
                        if (!hasWhere)
                            wraped += " WHERE ";
                        else
                            wraped += " AND ";

                        wraped += this.GetSearchQuery(request.SearchColumns, parameters);
                    }

                    if (request.SortOrder.Any())
                        wraped += this.GetSortQuery(request.SortOrder);
                }

                wraped = $"SELECT COUNT(*) FROM ({wraped}) AS COUNT_STAR;" + wraped;

                if (request.Limit > 0)
                    wraped += $" LIMIT :limit OFFSET :offset";

                if (!wraped.EndsWith(CharConstants.SEMI_COLON))
                    wraped += CharConstants.SEMI_COLON;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw new Exception("WrapQuery Exception: " + ex.Message);
            }
            return wraped;
        }

        private string GetFilterQuery(string sql, List<Param> filters)
        {
            string query = string.Empty;

            List<string> filterParams = new List<string>();

            List<Param> queryParams = SqlHelper.GetSqlParams(sql, (int)EbObjectTypes.DataReader);

            foreach (Param param in filters)
            {
                if (param.Name == EBPARAM_LOCID)
                    continue;

                Param pmatch = queryParams.Find(item => item.Name == param.Name);
                if (pmatch == null)
                {
                    filterParams.Add($"PWWRP.{param.Name} = :{param.Name}");
                }
            }

            if (filterParams.Any())
            {
                query = query + " WHERE " + filterParams.Join(" AND ");
            }

            return query;
        }

        private string GetSearchQuery(List<Param> searchColumns, List<DbParameter> parameters)
        {
            string query = string.Empty;

            List<string> searchParams = new List<string>();

            foreach (Param search in searchColumns)
            {
                try
                {
                    string pname = $"{search.Name}_srchcol";
                    string value = string.Format("%{0}%", search.Value.ToLower());

                    searchParams.Add($"LOWER(PWWRP.{search.Name}) LIKE :{pname}");

                    parameters.Add(this.EbConnectionFactory.ObjectsDB.GetNewParameter(pname, EbDbTypes.String, value));
                }
                catch
                {
                    //handle exceptions
                }
            }

            query = query + "(" + searchParams.Join(" OR ") + ")";

            return query;
        }

        private string GetSortQuery(List<SortColumn> sortOrder)
        {
            string query = string.Empty;

            List<string> sort = new List<string>();

            foreach (var order in sortOrder)
            {
                sort.Add($"{order.Name} {order.GetString()}");
            }

            query = query + " ORDER BY " + sort.Join($" {CharConstants.COMMA} ");

            return query;
        }

        public MobileDataResponse Post(MobilePsDataRequest request)
        {
            MobileDataResponse resp = new MobileDataResponse();
            try
            {
                EbDataReader dataReader = this.GetEbObject<EbDataReader>(request.DataSourceRefId);
                List<DbParameter> parameters;
                if (!string.IsNullOrWhiteSpace(request.Params))
                {
                    List<Param> Params = JsonConvert.DeserializeObject<List<Param>>(request.Params);
                    parameters = Params.ParamsToDbParameters(this.EbConnectionFactory);
                }
                else
                    parameters = new List<DbParameter>();

                parameters.Add(this.EbConnectionFactory.DataDB.GetNewParameter("eb_currentuser_id", EbDbTypes.Int32, request.UserId));
                if (request.Limit != 0)
                {
                    parameters.Add(this.EbConnectionFactory.ObjectsDB.GetNewParameter("limit", EbDbTypes.Int32, request.Limit));
                    parameters.Add(this.EbConnectionFactory.ObjectsDB.GetNewParameter("offset", EbDbTypes.Int32, request.Offset));
                }

                string sql = dataReader.Sql.Trim().TrimEnd(CharConstants.SEMI_COLON);
                string wraped;
                if (!string.IsNullOrWhiteSpace(request.Search))
                {
                    List<Param> SrchParm = JsonConvert.DeserializeObject<List<Param>>(request.Search);
                    wraped = $"SELECT * FROM ({sql}) AS PWWRP WHERE LOWER(PWWRP.{SrchParm[0].Name}) LIKE '%{SrchParm[0].Value.ToLower()}%'";
                }
                else
                    wraped = dataReader.Sql;

                wraped = $"SELECT COUNT(*) FROM ({wraped}) AS COUNT_STAR;" + wraped;

                if (request.Limit > 0)
                    wraped += $" LIMIT :limit OFFSET :offset";

                wraped += CharConstants.SEMI_COLON;

                resp.Data = this.EbConnectionFactory.DataDB.DoQueries(wraped, parameters.ToArray());
                resp.Message = "Success";
            }
            catch (Exception ex)
            {
                resp.Message = "GetData Exception: " + ex.Message;
                Console.WriteLine("Exception in GetDataPs request [mobile] ::" + ex.Message);
            }
            return resp;
        }

        public MobileDataResponse Get(MobileDataRequest request)
        {
            MobileDataResponse resp = new MobileDataResponse();
            try
            {
                EbDataReader dataReader = this.GetEbObject<EbDataReader>(request.DataSourceRefId);

                List<DbParameter> parameters = new List<DbParameter>
                {
                    this.EbConnectionFactory.DataDB.GetNewParameter("eb_currentuser_id", EbDbTypes.Int32, request.UserId)
                };

                resp.Data = this.EbConnectionFactory.DataDB.DoQueries(dataReader.Sql, parameters.ToArray());
            }
            catch (Exception ex)
            {
                resp.Message = "No Data";
                Console.WriteLine("Exception at object list for user mobile req ::" + ex.Message);
            }
            return resp;
        }

        public MobileFormDataResponse Get(MobileFormDataRequest request)
        {
            MobileFormDataResponse response = new MobileFormDataResponse();
            try
            {
                EbMobilePage mobilePage = this.GetEbObject<EbMobilePage>(request.MobilePageRefId);

                EbMobileForm formContainer = (EbMobileForm)mobilePage.Container;

                if (!string.IsNullOrEmpty(formContainer.WebFormRefId))
                {
                    if (request.RowId != 0)
                    {
                        GetRowDataResponse row_resp = this.Gateway.Send<GetRowDataResponse>(new GetRowDataRequest
                        {
                            SolnId = request.SolnId,
                            UserId = request.UserId,
                            UserAuthId = request.UserAuthId,
                            RefId = formContainer.WebFormRefId,
                            RowId = request.RowId,
                            CurrentLoc = request.LocId,
                        });

                        if (!string.IsNullOrEmpty(row_resp.FormDataWrap))
                        {
                            WebformDataWrapper wraper = JsonConvert.DeserializeObject<WebformDataWrapper>(row_resp.FormDataWrap);
                            response.Data = wraper.FormData;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
            return response;
        }

        public MyActionsResponse Get(MyActionsRequest request)
        {
            MyActionsResponse response = new MyActionsResponse();
            try
            {
                User UserObject = GetUserObject(request.UserAuthId);

                DbParameter[] parameters = {
                    this.EbConnectionFactory.ObjectsDB.GetNewParameter("userid", EbDbTypes.String, request.UserId.ToString()),
                    this.EbConnectionFactory.ObjectsDB.GetNewParameter("roleids", EbDbTypes.String, UserObject.RoleIds.Join(",")),
                    this.EbConnectionFactory.ObjectsDB.GetNewParameter("usergroupids", EbDbTypes.String, UserObject.UserGroupIds.Join(","))
                };

                EbDataTable dt = this.EbConnectionFactory.DataDB.DoQuery(EbConnectionFactory.ObjectsDB.EB_GET_MYACTIONS, parameters);

                if (dt != null)
                {
                    foreach (EbDataRow row in dt.Rows)
                    {
                        EbMyActionsMobile action = new EbMyActionsMobile
                        {
                            Id = Convert.ToInt32(row["id"]),
                            StartDate = Convert.ToDateTime(row["from_datetime"]),
                            StageId = Convert.ToInt32(row["eb_stages_id"]),
                            WebFormRefId = row["form_ref_id"]?.ToString(),
                            WebFormDataId = Convert.ToInt32(row["form_data_id"]),
                            ApprovalLinesId = Convert.ToInt32(row["eb_approval_lines_id"]),
                            Description = row["description"]?.ToString()
                        };
                        response.Actions.Add(action);

                        try
                        {
                            action.ActionType = row["my_action_type"].ToString().ToEnum<MyActionTypes>();
                        }
                        catch
                        {
                            Console.WriteLine("Parse error");
                            Console.WriteLine("Failed to parse my_action_type to enum");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception at GetMyActionsRequest");
                Console.WriteLine(ex.Message);
            }
            return response;
        }

        public ParticularActionResponse Get(ParticularActionsRequest request)
        {
            ParticularActionResponse response = new ParticularActionResponse();
            try
            {
                string query = @"SELECT * FROM eb_my_actions WHERE id = :actionid AND COALESCE(is_completed, 'F') = 'F'";

                DbParameter[] parameters = {
                    this.EbConnectionFactory.ObjectsDB.GetNewParameter("actionid", EbDbTypes.Int32, request.ActionId),
                };

                EbDataTable dt = this.EbConnectionFactory.DataDB.DoQuery(query, parameters);

                if (dt != null && dt.Rows.Any())
                {
                    EbDataRow row = dt.Rows.FirstOrDefault();

                    EbMyActionsMobile action = new EbMyActionsMobile
                    {
                        Id = request.ActionId,
                        StartDate = Convert.ToDateTime(row["from_datetime"]),
                        StageId = Convert.ToInt32(row["eb_stages_id"]),
                        WebFormRefId = row["form_ref_id"]?.ToString(),
                        WebFormDataId = Convert.ToInt32(row["form_data_id"]),
                        ApprovalLinesId = Convert.ToInt32(row["eb_approval_lines_id"]),
                        Description = row["description"]?.ToString()
                    };
                    response.Action = action;

                    try
                    {
                        action.ActionType = row["my_action_type"].ToString().ToEnum<MyActionTypes>();

                        var actionInfo = this.Get(new MyActionInfoRequest
                        {
                            UserAuthId = request.UserAuthId,
                            UserId = request.UserId,
                            SolnId = request.SolnId,
                            StageId = action.StageId,
                            WebFormDataId = action.WebFormDataId,
                            WebFormRefId = action.WebFormRefId
                        });
                        response.ActionInfo = actionInfo;

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Parse error");
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception at GetMyActionsRequest");
                Console.WriteLine(ex.Message);
            }
            return response;
        }

        public MyActionInfoResponse Get(MyActionInfoRequest request)
        {
            MyActionInfoResponse response = new MyActionInfoResponse();
            try
            {
                User UserObject = GetUserObject(request.UserAuthId);
                string query = @"SELECT 
	                                ES.stage_name,ES.stage_unique_id,ESA.action_unique_id,ESA.action_name
                                FROM 
	                                eb_stages ES
                                LEFT JOIN 
	                                eb_stage_actions ESA
                                ON 
	                                ESA.eb_stages_id = ES.id
                                WHERE 
	                                ES.id = :stageid
                                AND
	                                COALESCE(ES.eb_del, 'F') = 'F'
                                AND
	                                COALESCE(ESA.eb_del, 'F') = 'F';";

                List<DbParameter> parameters = new List<DbParameter> {
                    this.EbConnectionFactory.ObjectsDB.GetNewParameter("stageid", EbDbTypes.Int32, request.StageId)
                };

                EbDataTable dt = this.EbConnectionFactory.DataDB.DoQuery(query, parameters.ToArray()) ?? new EbDataTable();

                WebFormServices webFormService = base.ResolveService<WebFormServices>();
                GetFormData4MobileResponse resp = webFormService.Any(new GetFormData4MobileRequest
                {
                    RefId = request.WebFormRefId,
                    DataId = request.WebFormDataId,
                    SolnId = request.SolnId,
                    UserAuthId = request.UserAuthId,
                    UserId = request.UserId
                });
                response.Data = resp.Params;

                if (dt.Rows.Any())
                {
                    var first = dt.Rows.First();

                    foreach (EbDataRow row in dt.Rows)
                    {
                        if (row == first)
                        {
                            response.StageUniqueId = first["stage_unique_id"].ToString();
                            response.StageName = first["stage_name"].ToString();
                        }

                        response.StageActions.Add(new EbStageActionsMobile
                        {
                            ActionName = row["action_name"].ToString(),
                            ActionUniqueId = row["action_unique_id"].ToString()
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            return response;
        }

        //v2 data request

        public MobileDataResponse Get(EbMobileDataRequest request)
        {
            MobileDataResponse resp = null;
            try
            {
                EbMobileVisualization visualization = (EbMobileVisualization)GetEbObject<EbMobilePage>(request.RefId).Container;

                List<EbMobileApprovalButton> approvalButtons = visualization.GetControlsByType<EbMobileApprovalButton>();

                bool hasApprovalBtn = approvalButtons.Count > 0;

                if (hasApprovalBtn)
                {
                    User user = GetUserObject(request.UserAuthId);
                    GetApprovalData(user, approvalButtons);
                }

                resp = this.Get(new MobileVisDataRequest
                {
                    UserId = request.UserId,
                    UserAuthId = request.UserAuthId,
                    SolnId = request.SolnId,
                    WhichConsole = request.WhichConsole,
                    DataSourceRefId = visualization.DataSourceRefId,
                    Limit = request.Limit,
                    Offset = request.Offset,
                    Params = request.Parameters,
                    SearchColumns = request.SearchColumns,
                    SortOrder = request.SortColumns
                });

                if (resp != null && hasApprovalBtn)
                {
                    if (resp.Data != null && resp.Data.Tables.Count >= 2)
                    {
                        ProcessApprovalData(resp.Data.Tables[1], approvalButtons);
                    }
                    resp.Message = "Success";
                }
            }
            catch (Exception ex)
            {
                resp = resp ?? new MobileDataResponse();
                resp.Message = ex.Message;

                Console.WriteLine("Exception at object list for user mobile req ::" + ex.Message);
            }
            return resp;
        }

        private void GetApprovalData(User user, List<EbMobileApprovalButton> buttons)
        {
            try
            {
                foreach (EbMobileApprovalButton btn in buttons)
                {
                    if (string.IsNullOrEmpty(btn.FormRefid)) continue;

                    string roles = string.Join(CharConstants.COMMA, user.RoleIds.ToArray());

                    string query = string.Format(@"SELECT 
	                                                    TBL1.*, 
	                                                    TBL2.prev_stage,
	                                                    TBL2.action_name
                                                    FROM (SELECT 
		                                                    EMA.id as action_id,
		                                                    EMA.form_ref_id, 
		                                                    EMA.form_data_id, 
		                                                    ES.stage_name,
		                                                    EA.eb_approval_lines_id,
		                                                    EMA.is_completed
                                                        FROM
	                                                        eb_approval EA, eb_my_actions EMA, eb_stages ES
                                                        WHERE
	                                                        EA.eb_my_actions_id = EMA.id
                                                        AND
	                                                        ES.id = EMA.eb_stages_id
                                                        AND
	                                                        ('{0}' = any(string_to_array(EMA.user_ids, ',')) OR (string_to_array(EMA.role_ids,',')) && (string_to_array('{1}',',')))
                                                        AND 
	                                                        EMA.form_ref_id ='{2}'
                                                        AND
	                                                        EMA.eb_del='F'
                                                    ) TBL1 
                                                    LEFT JOIN 
                                                    (
	                                                    SELECT distinct 
		                                                    EAL.id as al_id,
		                                                    ES.stage_name as prev_stage, 
		                                                    ESA.action_name 
	                                                    FROM 
		                                                    eb_approval_lines EAL, eb_stages ES, eb_stage_actions ESA
	                                                    WHERE 
		                                                    EAL.stage_unique_id = ES.stage_unique_id 
	                                                    AND 
		                                                    EAL.action_unique_id = ESA.action_unique_id
	                                                    AND 
		                                                    ES.id = ESA.eb_stages_id 
	                                                    AND 
		                                                    ES.form_ref_id = '{2}'
                                                    ) TBL2
                                                    ON 
	                                                    TBL1.eb_approval_lines_id = TBL2.al_id;", user.UserId, roles, btn.FormRefid);

                    btn.ApprovalData = this.EbConnectionFactory.DataDB.DoQuery(query);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        private void ProcessApprovalData(EbDataTable dataSourceData, List<EbMobileApprovalButton> approvalButtons)
        {
            foreach (EbDataRow row in dataSourceData.Rows)
            {
                foreach (EbMobileApprovalButton button in approvalButtons)
                {
                    if (row == dataSourceData.Rows.First())
                    {
                        button.StageNameIndex = dataSourceData.Columns.Count;
                        button.ActionIdIndex = button.StageNameIndex + 1;
                        button.StatusIndex = button.ActionIdIndex + 1;

                        dataSourceData.Columns.Add(new EbDataColumn
                        {
                            ColumnName = $"{button.Name}_stage_name",
                            ColumnIndex = button.StageNameIndex,
                            Type = EbDbTypes.String
                        });

                        dataSourceData.Columns.Add(new EbDataColumn
                        {
                            ColumnName = $"{button.Name}_action_id",
                            ColumnIndex = button.ActionIdIndex,
                            Type = EbDbTypes.Int32
                        });

                        dataSourceData.Columns.Add(new EbDataColumn
                        {
                            ColumnName = $"{button.Name}_status",
                            ColumnIndex = button.StatusIndex,
                            Type = EbDbTypes.String
                        });
                    }

                    int dataId = Convert.ToInt32(row[button.FormId.ColumnName]);

                    EbDataTable dt = button.ApprovalData;

                    if (dt != null && dt.Rows.Any())
                    {
                        EbDataRow dataRow = dt.Rows.Find(r => Convert.ToInt32(r["form_data_id"]) == dataId);

                        if (dataRow != null)
                        {
                            char isCompleted = Convert.ToChar(dataRow["is_completed"]);

                            if (isCompleted == 'F')
                            {
                                row[button.StageNameIndex] = dataRow["stage_name"];
                                row[button.ActionIdIndex] = dataRow["action_id"];
                            }

                            row[button.StatusIndex] = dataRow["action_name"];
                        }
                    }
                }
            }
        }
    }
}
